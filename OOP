--Інкапсуляція--
Поля класу зписують переважно з ідентифікатором private, щоб захистити від прямого доступу до них користувача.
Для отримання і присвоєння даних в такому випадку використовують get() і set() методи. Методи переважно не є private(можуть бути public, default, protected), але якщо даний метод використовується в методах, що описують дію об'єкта, тобто є допоміжним, то користувачу не обов'язково знати про нього, тобто варто зробити такий метод з ідентифікатором private також.

приклад:
В класі Computer є поле int ram. Користувач може задавати будь-яке значення, навіть від'ємне. Оскільки пам'ять не може бути від'ємна, то щоб запобігти некоректному присвоювання даних, використовують ідент. private і метод set(),в якому задаються відповідні обмеження.

--Наслідування--
приклад1:
Клас Baby має поля name, sex, mother, father і метод sleep(). Цей клас описує характеистики немовля. Але оскільки дитина розвивається, то вона починає говорити, бігати, співати. І так до кінця життя в неї з'являється велика кількість нових характеристик. В кінці розвитку можна створити клас OldPerson і записати всі характеристики набуті протягом життя від народження, тоді клас буде дуже великим за обсягом. І враховуючи те, що періодів розвитку було дуже багато, то код в кожному наступному періоді буде дублювати дані з попереднього(це якщо не використовувати наслідування). В разівикористання наслідування в класі OldPerson може міститись тільки поле boolean grandmother до прикладу.

приклад2:
Батько хоче, щоб дитина точно грала футбол в майбутньому так само як тато, а мама - щоб дитина точно співала так само як мама. 
public class Child implements Mother, Father{
	private name;
	Child(String name){
		this.name = name;
	}
	@Override 
	public void playFootbol(){
		System.out.println("I'm playing footbol like father");
	}
	@Override 
	public void sing(){
		System.out.println("I'm singing like mother");
	}	
}


--Поліморфізм--
приклад1:
Реалізація інтерфейсу List в класах ArrayList і LinkedList;

приклад2:
Перегрузка конструктора.


